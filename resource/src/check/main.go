package main

import (
	"encoding/json"
	"fmt"
	"log"
	"models"
	"net/http"
	"os"
)

func main() {
	var request models.CheckRequest

	err := json.NewDecoder(os.Stdin).Decode(&request)
	if err != nil {
		fmt.Fprintln(os.Stderr, "error decoding payload: "+err.Error())
		os.Exit(1)
	}
	//if we were using vendor + product for anything, modify the url
	requestURL := fmt.Sprintf(
		"http://www.cvedetails.com/json-feed.php?numrows=30&vendor_id=%s&product_id=%sorder_by=3",
		request.Source.Vendor,
		request.Source.Product)
	resp, err := http.Get(requestURL)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	defer resp.Body.Close()

	dec := json.NewDecoder(resp.Body)
	_, err = dec.Token()
	if err != nil {
		log.Fatal(err)
	}

	var cve models.CVE
	versions := []models.Version{}

	for dec.More() {

		err := dec.Decode(&cve)
		if err != nil {
			log.Fatal(err)
		}

		if request.Version.CVE != "" {
			if request.Version.CVE <= cve.CveID {
				versions = append(versions, models.Version{CVE: cve.CveID})
			}

		} else {
			versions = append(versions, models.Version{CVE: cve.CveID})
			// list is sorted newest -> oldest so just return first
			break
		}
	}

	json.NewEncoder(os.Stdout).Encode(versions)

}
